{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/seanmodd/Dev/AuthFiles/036_reset_password_functionality/client/pages/reset-password.js\";\nimport { useState, useEffect, useContext } from \"react\";\nimport firebase from \"../firebase\";\nimport { useRouter } from \"next/router\";\nimport { Context } from \"../context\";\nimport { toast } from \"react-toastify\";\n\nconst PasswordReset = () => {\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    state: {\n      user\n    }\n  } = useContext(Context);\n  let router = useRouter();\n  useEffect(() => {\n    if (user !== null) {\n      router.push(\"/\");\n    }\n  }, [user]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const config = {\n      url: process.env.passwordResetRedirect,\n      handleCodeInApp: true\n    };\n    await firebase.auth().sendPasswordResetEmail(email, config).then(() => {\n      setEmail(\"\");\n      setLoading(false);\n      toast(\"Check your email for password reset link\");\n    }).catch(error => {\n      setLoading(false);\n      toast(error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container col-md-6 offset-md-3 p-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"lead\",\n      children: \"If you have already registered, you can enter your email address to receive a password reset link\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        className: \"form-control\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        placeholder: \"Type your email\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        disabled: !email || loading,\n        children: loading ? \"Processing...\" : \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\nexport default PasswordReset;","map":{"version":3,"sources":["/Users/seanmodd/Dev/AuthFiles/036_reset_password_functionality/client/pages/reset-password.js"],"names":["useState","useEffect","useContext","firebase","useRouter","Context","toast","PasswordReset","email","setEmail","loading","setLoading","state","user","router","push","handleSubmit","e","preventDefault","config","url","process","env","passwordResetRedirect","handleCodeInApp","auth","sendPasswordResetEmail","then","catch","error","message","target","value"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACU,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM;AACJY,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADH,MAEFX,UAAU,CAACG,OAAD,CAFd;AAIA,MAAIS,MAAM,GAAGV,SAAS,EAAtB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,IAAI,KAAK,IAAb,EAAmB;AACjBC,MAAAA,MAAM,CAACC,IAAP,CAAY,GAAZ;AACD;AACF,GAJQ,EAIN,CAACF,IAAD,CAJM,CAAT;;AAMA,QAAMG,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACAP,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,UAAMQ,MAAM,GAAG;AACbC,MAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,qBADJ;AAEbC,MAAAA,eAAe,EAAE;AAFJ,KAAf;AAKA,UAAMrB,QAAQ,CACXsB,IADG,GAEHC,sBAFG,CAEoBlB,KAFpB,EAE2BW,MAF3B,EAGHQ,IAHG,CAGE,MAAM;AACVlB,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAL,MAAAA,KAAK,CAAC,0CAAD,CAAL;AACD,KAPG,EAQHsB,KARG,CAQIC,KAAD,IAAW;AAChBlB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAL,MAAAA,KAAK,CAACuB,KAAK,CAACC,OAAP,CAAL;AACD,KAXG,CAAN;AAYD,GArBD;;AAuBA,sBACE;AAAK,IAAA,SAAS,EAAC,oCAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAM,MAAA,QAAQ,EAAEd,YAAhB;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,SAAS,EAAC,cAFZ;AAGE,QAAA,KAAK,EAAER,KAHT;AAIE,QAAA,QAAQ,EAAGS,CAAD,IAAOR,QAAQ,CAACQ,CAAC,CAACc,MAAF,CAASC,KAAV,CAJ3B;AAKE,QAAA,WAAW,EAAC,iBALd;AAME,QAAA,SAAS;AANX;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAA;AAAA;AAAA;AAAA,cATF,eAUE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,QAAQ,EAAE,CAACxB,KAAD,IAAUE,OAAxD;AAAA,kBACGA,OAAO,GAAG,eAAH,GAAqB;AAD/B;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CA/DD;;AAiEA,eAAeH,aAAf","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport firebase from \"../firebase\";\nimport { useRouter } from \"next/router\";\nimport { Context } from \"../context\";\nimport { toast } from \"react-toastify\";\n\nconst PasswordReset = () => {\n  const [email, setEmail] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const {\n    state: { user },\n  } = useContext(Context);\n\n  let router = useRouter();\n\n  useEffect(() => {\n    if (user !== null) {\n      router.push(\"/\");\n    }\n  }, [user]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const config = {\n      url: process.env.passwordResetRedirect,\n      handleCodeInApp: true,\n    };\n\n    await firebase\n      .auth()\n      .sendPasswordResetEmail(email, config)\n      .then(() => {\n        setEmail(\"\");\n        setLoading(false);\n        toast(\"Check your email for password reset link\");\n      })\n      .catch((error) => {\n        setLoading(false);\n        toast(error.message);\n      });\n  };\n\n  return (\n    <div className=\"container col-md-6 offset-md-3 p-5\">\n      <h2>Reset Password</h2>\n      <p className=\"lead\">\n        If you have already registered, you can enter your email address to\n        receive a password reset link\n      </p>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          className=\"form-control\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"Type your email\"\n          autoFocus\n        />\n        <br />\n        <button className=\"btn btn-primary\" disabled={!email || loading}>\n          {loading ? \"Processing...\" : \"Submit\"}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default PasswordReset;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/seanmodd/Dev/AuthFiles/036_reset_password_functionality/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/seanmodd/Dev/AuthFiles/036_reset_password_functionality/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\n/**\n * create a component that will keep track of user's auth state\n * then wrap _app.js so that entire app knows if the user is logged in or not\n */\nimport React, { useEffect, useContext } from \"react\";\nimport firebase from \"../firebase\";\nimport { Context } from \"../context\";\nimport { axiosAuth } from \"../actions/axios\";\nimport { setCookie, destroyCookie } from \"nookies\";\n\nvar FirebaseAuthState = function FirebaseAuthState(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(Context),\n      dispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    return firebase.auth().onIdTokenChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var _yield$user$getIdToke, token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user) {\n                  _context.next = 6;\n                  break;\n                }\n\n                dispatch({\n                  type: \"LOGOUT\"\n                });\n                destroyCookie(null, \"token\");\n                setCookie(null, \"token\", \"\", {});\n                _context.next = 13;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return user.getIdTokenResult();\n\n              case 8:\n                _yield$user$getIdToke = _context.sent;\n                token = _yield$user$getIdToke.token;\n                // set token to cookie\n                destroyCookie(null, \"token\");\n                setCookie(null, \"token\", token, {}); // console.log(\"TOKEN\", token);\n                // send this token to backend\n                // backend will check if thie token is valid (using firebase admin tool)\n                // if it is verified, you get the same user information in the backend too\n                // then you can decide to either save this user in your database or update the existing user\n                // then send the user information back to client\n\n                axiosAuth.post(\"/current-user\", {}).then(function (res) {\n                  console.log(\"RES =====> \", res);\n                  dispatch({\n                    type: \"LOGIN\",\n                    payload: res.data\n                  });\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(FirebaseAuthState, \"o3sFqHzzIboOoOF6b2FSmERiAhY=\");\n\n_c = FirebaseAuthState;\nexport default FirebaseAuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthState\");","map":{"version":3,"sources":["/Users/seanmodd/Dev/AuthFiles/036_reset_password_functionality/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axiosAuth","setCookie","destroyCookie","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","getIdTokenResult","token","post","then","res","console","log","payload","data"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,SAAzC;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBACrBP,UAAU,CAACE,OAAD,CADW;AAAA,MAClCM,QADkC,eAClCA,QADkC;;AAG1CT,EAAAA,SAAS,CAAC,YAAM;AACd,WAAOE,QAAQ,CAACQ,IAAT,GAAgBC,gBAAhB;AAAA,2EAAiC,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACjCA,IADiC;AAAA;AAAA;AAAA;;AAEpCH,gBAAAA,QAAQ,CAAC;AACPI,kBAAAA,IAAI,EAAE;AADC,iBAAD,CAAR;AAGAP,gBAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,gBAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgB,EAAhB,EAAoB,EAApB,CAAT;AANoC;AAAA;;AAAA;AAAA;AAAA,uBAQZO,IAAI,CAACE,gBAAL,EARY;;AAAA;AAAA;AAQ5BC,gBAAAA,KAR4B,yBAQ5BA,KAR4B;AASpC;AACAT,gBAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,gBAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgBU,KAAhB,EAAuB,EAAvB,CAAT,CAXoC,CAYpC;AACA;AACA;AACA;AACA;AACA;;AACAX,gBAAAA,SAAS,CAACY,IAAV,CAAe,eAAf,EAAgC,EAAhC,EAAoCC,IAApC,CAAyC,UAACC,GAAD,EAAS;AAChDC,kBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;AACAT,kBAAAA,QAAQ,CAAC;AACPI,oBAAAA,IAAI,EAAE,OADC;AAEPQ,oBAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,mBAAD,CAAR;AAID,iBAND;;AAlBoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjC;;AAAA;AAAA;AAAA;AAAA,QAAP;AA2BD,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,sBAAO;AAAA,cAAGd;AAAH,mBAAP;AACD,CAlCD;;GAAMD,iB;;KAAAA,iB;AAoCN,eAAeA,iBAAf","sourcesContent":["/**\n * create a component that will keep track of user's auth state\n * then wrap _app.js so that entire app knows if the user is logged in or not\n */\n\nimport React, { useEffect, useContext } from \"react\";\nimport firebase from \"../firebase\";\nimport { Context } from \"../context\";\nimport { axiosAuth } from \"../actions/axios\";\nimport { setCookie, destroyCookie } from \"nookies\";\n\nconst FirebaseAuthState = ({ children }) => {\n  const { dispatch } = useContext(Context);\n\n  useEffect(() => {\n    return firebase.auth().onIdTokenChanged(async (user) => {\n      if (!user) {\n        dispatch({\n          type: \"LOGOUT\",\n        });\n        destroyCookie(null, \"token\");\n        setCookie(null, \"token\", \"\", {});\n      } else {\n        const { token } = await user.getIdTokenResult();\n        // set token to cookie\n        destroyCookie(null, \"token\");\n        setCookie(null, \"token\", token, {});\n        // console.log(\"TOKEN\", token);\n        // send this token to backend\n        // backend will check if thie token is valid (using firebase admin tool)\n        // if it is verified, you get the same user information in the backend too\n        // then you can decide to either save this user in your database or update the existing user\n        // then send the user information back to client\n        axiosAuth.post(\"/current-user\", {}).then((res) => {\n          console.log(\"RES =====> \", res);\n          dispatch({\n            type: \"LOGIN\",\n            payload: res.data,\n          });\n        });\n      }\n    });\n  }, []);\n\n  return <>{children}</>;\n};\n\nexport default FirebaseAuthState;\n"]},"metadata":{},"sourceType":"module"}